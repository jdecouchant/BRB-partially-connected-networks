import sys
import random
import os
import subprocess
import pickle
import threading
import time
from matplotlib import pyplot as plt
import numpy as np
from ctypes import c_double
import os.path
import math
import sys
import queue


import networkx as nx

import kdiamond
import kpasted
import generateGraphs

from statistics import mean


def printOmnetLinks(G, N):
    s = ''
    for i in range(N):
        for j in range(i, N):
            if G.has_edge(i, j):
                s += 'cli['+str(i)+'].pppg++ <--> fiberline <--> cli['+str(j)+'].pppg++;\n'
    return s

def writeNedFile(G, N, K):

    # Generate the random.ned file
    fo = open('random_'+str(N)+'_'+str(K)+'.ned', 'w')
    fo.write('\
    package broadcastsign.simulations;\n\
    \n\
    import inet.common.misc.ThruputMeteringChannel;\n\
    import inet.networklayer.configurator.ipv4.Ipv4NetworkConfigurator;\n\
    import inet.node.inet.Router;\n\
    import inet.node.inet.StandardHost;\n\n')
    fo.write('network random_'+str(N)+'_'+str(K)+'\n\
    {\n\
        parameters:\n\
            int n;\n\
        types:\n\
            channel fiberline extends ThruputMeteringChannel\n\
            {\n\
                delay = 1us;\n\
                datarate = 512Mbps;\n\
                thruputDisplayFormat = "u";\n\
            }\n\
            channel ethernetline extends ThruputMeteringChannel\n\
            {\n\
                delay = 0.1us;\n\
                datarate = 1Mbps;\n\
                thruputDisplayFormat = "u";\n\
            }\n\
        submodules:\n\
            configurator: Ipv4NetworkConfigurator {\n\
                parameters:\n\
                    @display("p=100,100;is=s");\n\
            }\n\
            cli[n]: StandardHost {\n\
                parameters:\n\
                    @display("i=device/laptop"); //;p=250,100,col,100");\n\
            }\n\
        connections:\n\
    ')
    fo.write(printOmnetLinks(G,N))
    fo.write('}')
    fo.close()

def writeIniFile(N, K, F):
    nedname = 'random_'+str(N)+'_'+str(K)
    
    fo = open('random_'+str(N)+'_'+str(K)+'.ini', 'w')
    fo.write('[General]\n')

    fo.write('cmdenv-event-banners = false'+'\n')
    fo.write('**.cmdenv-log-level = OFF'+'\n')
    fo.write('cmdenv-performance-display = false'+'\n')
    fo.write('cmdenv-status-frequency = 1s'+'\n')
    fo.write('cmdenv-express-mode = true'+'\n')
    fo.write('fname-append-host = false'+'\n')
    fo.write('parallel-simulation = false'+'\n')
    fo.write('print-undisposed = false'+'\n')
    fo.write('record-eventlog = false'+'\n')
    fo.write('warnings = false'+'\n')
    fo.write('**.module-eventlog-recording = false'+'\n')
    fo.write('*.result-recording-modes = -'+'\n')
    fo.write('**.scalar-recording = false'+'\n')
    fo.write('**.vector-record-eventnumbers = false'+'\n')
    fo.write('**.vector-recording = false'+'\n')
    fo.write('**.statistic-recording = false'+'\n')

    fo.write('**.ppp[*].queue.frameCapacity = 0'+'\n')
    fo.write('**.ppp[*].ppp.queue.typename = "DropTailQueue"'+'\n\n')
                
    cname = str(N)+'_'+str(K)+'_'+str(F)+'-allOptim'
    fo.write('[Config c'+cname+']\n')
    fo.write('**.OPTIM_SENDTOECHO = true'+'\n');
    fo.write('**.OPTIM_ECHOTOREADY = true'+'\n');
    fo.write('**.OPTIM_CUTECHOREADY_AFTER_DELIVER = true'+'\n');
    fo.write('**.OPTIM_CUT_ECHO_AFTER_READY_RECEIVED = true'+'\n');
    fo.write('**.OPTIM_AVOID_NEIGHBORS_THAT_DELIVERED = true'+'\n');
    fo.write('**.OPTIM_CUT_ECHO_TO_READY_NEIGHBORS = true'+'\n');
    fo.write('**.OPTIM_BRACHA_OVERPROVISIONING = true'+'\n');
    fo.write('**.OPTIM_BITSET = true'+'\n');
    fo.write('network = '+nedname+'\n')
    fo.write('*.n = '+str(N)+'\n')
    fo.write('**.cli[*].app[*].nPar = '+str(N)+'\n')
    fo.write('**.cli[*].app[*].fPar = '+str(F)+'\n')
    fo.write('**.cli[*].app[*].kPar = '+str(K)+'\n')
    fo.write('**.cli[*].app[*].byzStringPar = ""'+'\n')

    fo.write('**.cli[*].numApps = 1'+'\n')
    fo.write('**.cli[*].app[*].typename = "PeerHost"'+'\n')
    fo.write('**.cli[*].app[*].localPort = 9999'+'\n')
    fo.write('**.cli[*].app[*].startTimePar = 0.03s'+'\n')
    fo.write('**.cli[*].app[*].roundDurationPar = 0.03s'+'\n')
    fo.write('**.cli[*].app[*].msgSizePar = 128'+'\n')
    fo.write('**.cli[*].app[*].outputPrefixPar = "stats/'+str(N)+'_'+str(K)+'_'+str(F)+'"'+'\n')
    fo.write('\n')

    cname = str(N)+'_'+str(K)+'_'+str(F)+'-noOptim'
    fo.write('[Config c'+cname+']\n')
    fo.write('network = '+nedname+'\n')
    fo.write('*.n = '+str(N)+'\n')
    fo.write('**.cli[*].app[*].nPar = '+str(N)+'\n')
    fo.write('**.cli[*].app[*].fPar = '+str(F)+'\n')
    fo.write('**.cli[*].app[*].kPar = '+str(K)+'\n')
    fo.write('**.cli[*].app[*].byzStringPar = ""'+'\n')

    fo.write('**.cli[*].numApps = 1'+'\n')
    fo.write('**.cli[*].app[*].typename = "PeerHost"'+'\n')
    fo.write('**.cli[*].app[*].localPort = 9999'+'\n')
    fo.write('**.cli[*].app[*].startTimePar = 0.03s'+'\n')
    fo.write('**.cli[*].app[*].roundDurationPar = 0.03s'+'\n')
    fo.write('**.cli[*].app[*].msgSizePar = 128'+'\n')
    fo.write('**.cli[*].app[*].outputPrefixPar = "stats/'+str(N)+'_'+str(K)+'_'+str(F)+'"'+'\n')
    fo.write('\n')

    fo.close()

cmd = 'rm dic.txt'
out = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

cmd = 'rm msgsImprovement.txt'
out = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

resd = {}
msgsImprovement = {}

#if os.path.isfile('dic.txt'):
#    inf = open("dic.txt", "rb")
#    resd = pickle.load(inf)
#    inf.close()

repeats = 10
nthreads = 2
delete_ini_ned_file = True

def runParams(nthreads):

    q = queue.Queue()
    for n in [16]: #range(10, 45, 6): # number of nodes
        resd[n] = {}
        msgsImprovement[n] = {}
        for f in [4]: #range(1, int((n-1)/3)+1, 2): # number of byzantine nodes
            resd[n][f] = {}
            msgsImprovement[n][f] = {}
            start = 2*f+1
            if (n * start % 2 == 1):
                start += 1
            for k in [2*f+1]: #range(start, n, 2): #range(2*f+1, n-1): # graph connectivity

                if k*n % 2 == 1:
                    continue
                resd[n][f][k] = {}
                resd[n][f][k][0] = []
                resd[n][f][k][1] = []
                msgsImprovement[n][f][k] = []

                q.put([n, f, k])

    lock = threading.Lock()

    def worker():
        while True:
            config = q.get()
            if config is None:
                return

            n = config[0]
            f = config[1]
            k = config[2]

            

##            lock.acquire()
##
##            if (not n in resd) or (not f in resd[n]) or (not k in resd[n][f]) or (not 0 in resd[n][f][k]) :
##                resd[n] = {}
##                resd[n][f] = {}
##                resd[n][f][k] = {}
##                resd[n][f][k][0] = []
##                resd[n][f][k][1] = []
##            if (not n in msgsImprovement) or (not f in msgsImprovement[n]) or (not k in msgsImprovement[n][f]):
##                msgsImprovement[n] = {}
##                msgsImprovement[n][f] = {}
##                msgsImprovement[n][f][k] = []
##
##            lock.release()


            cname = str(n)+'_'+str(k)+'_'+str(f)
            cmd = 'cp disjointPaths.py ./stats/'+cname+'.py'
            out = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
            
            l0_long = []
            l1_long = []
            for r in range(repeats):
                
                # N*K must be even
                G = generateGraphs.generate_KRegularKConnectedRandomGraph(n,k)

                cname='c'+str(n)+'_'+str(k)+'_'+str(f)+'-noOptim'
                cmd = 'rm stats/'+str(n)+'_'+str(k)+'_'+str(f)+'*'
                out = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

                cname = str(n)+'_'+str(k)+'_'+str(f)
                cmd = 'cp disjointPaths.py ./stats/'+cname+'.py'
                out = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

                writeNedFile(G, n, k)
                writeIniFile(n, k, f)
                ininame = 'random_'+str(n)+'_'+str(k)+'.ini'
                cmd='../BRB -r 0 -m -u Cmdenv -c c'+cname+'-noOptim -n ../src:.:../../../../../sim/inet4/src:../../../../../sim/inet4/examples:../../../../../sim/inet4/tutorials:../../../../../sim/inet4/showcases --image-path=../../../../../sim/inet4/images -l ../../../../../sim/inet4/src/INET '\
                     +ininame+' > /dev/null'
                os.system(cmd)

                ndelivers = 0
                inf = open('stats/'+str(n)+'_'+str(k)+'_'+str(f)+'.delivers', 'r')
                for line in inf:
                    ndelivers = int(line.rstrip('\n'))
                if ndelivers != n:
                    print('Not all nodes delivered (all optims)! aborting')
                    print("n =",n,", f =",f,", k =",k,'no optim')
                    print(ndelivers, "out of", n) 
                    sys.exit()
                inf.close()

                cname='c'+str(n)+'_'+str(k)+'_'+str(f)+'-noOptim'
                inf = open('stats/'+str(n)+'_'+str(k)+'_'+str(f)+'.msgs', 'r')
                l0 = []
                for line in inf:
                    l0.append(float(line.rstrip('\n')))
                inf.close()
                l0_long.extend(l0)

                

                cname='c'+str(n)+'_'+str(k)+'_'+str(f)+'-allOptim'
                cmd = 'rm stats/'+str(n)+'_'+str(k)+'_'+str(f)+'*'
                out = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

                cname = str(n)+'_'+str(k)+'_'+str(f)
                cmd = 'cp disjointPaths.py ./stats/'+cname+'.py'
                out = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

                writeNedFile(G, n, k)
                writeIniFile(n, k, f)
                cmd='../BRB -r 0 -m -u Cmdenv -c c'+cname+'-allOptim -n ../src:.:../../../../../sim/inet4/src:../../../../../sim/inet4/examples:../../../../../sim/inet4/tutorials:../../../../../sim/inet4/showcases --image-path=../../../../../sim/inet4/images -l ../../../../../sim/inet4/src/INET '\
                     +ininame+' > /dev/null'
                os.system(cmd)



                ndelivers = 0
                inf = open('stats/'+str(n)+'_'+str(k)+'_'+str(f)+'.delivers', 'r')
                for line in inf:
                    ndelivers = int(line.rstrip('\n'))
                if ndelivers != n:
                    print('Not all nodes delivered (no optims)! aborting')
                    print("n =",n,", f =",f,", k =",k,'all optims')
                    print(ndelivers, "out of", n)
                    sys.exit()
                else:
                    if delete_ini_ned_file:
                        nedname = 'random_'+str(n)+'_'+str(k)+'.ned'
                        cmd = 'rm '+ininame+' '+nedname
                        out = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
                inf.close()
 


                cname='c'+str(n)+'_'+str(k)+'_'+str(f)+'-allOptim'
                inf = open('stats/'+str(n)+'_'+str(k)+'_'+str(f)+'.msgs', 'r')
                l1 = []
                for line in inf:
                    l1.append(float(line.rstrip('\n')))
                inf.close()
                l1_long.extend(l1)

                lock.acquire()
                #print(msgsImprovement)
                #print(n, f, k)
                msgsImprovement[n][f][k].append( (mean(l1)-mean(l0)) / mean(l0))
                print("n ="+str(n)+", f="+str(f)+", k="+str(k)+', r='+str(r),end='')
                print(' - msgs :'+str(int(100*(mean(l1)-mean(l0)) / mean(l0)))+'% ',end='')
                print('('+str(mean(l1))+', '+str(mean(l0))+')')
                lock.release()

                cmd = 'rm stats/'+str(n)+'_'+str(k)+'_'+str(f)+'*.graph'
                out = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)


    threads = [ threading.Thread(target=worker) for _i in range(nthreads) ]
    for thread in threads:
        q.put(None)  # one EOF marker for each thread
        thread.start()

    for thread in threads:
        thread.join()

outf = open("dic.txt", "wb")
pickle.dump(resd, outf)
outf.close()

outf = open("msgsImprovement.txt", "wb")
pickle.dump(msgsImprovement, outf)
outf.close()

runParams(nthreads)

##
##            lock.acquire()
##            resd[n][f][k][0] = l0_long
##            resd[n][f][k][1] = l1_long
##            lock.release()
##
##            l0_long = []
##            l1_long = []
##            for r in range(repeats):
##                print('\t', r, ':', end='')
##
##                # N*K must be even
##                G = generateGraphs.generate_KRegularKConnectedRandomGraph(n,k)
##
##                cname='c'+str(n)+'_'+str(k)+'_'+str(f)+'-noOptim'
##                cmd = 'rm stats/output_'+cname[1:]+'*'                
##                out = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
##                writeNedFile(G, n, k)
##                writeIniFile(n, k)
##                ininame = 'random_'+str(n)+'_'+str(k)+'.ini'
##                cmd='../BRB -r 0 -m -u Cmdenv -c '+cname+' -n ../src:.:../../../../../sim/inet4/src:../../../../../sim/inet4/examples:../../../../../sim/inet4/tutorials:../../../../../sim/inet4/showcases --image-path=../../../../../sim/inet4/images -l ../../../../../sim/inet4/src/INET '+ininame+' > /dev/null'
##                os.system(cmd)
##
##                ndelivers = 0
##                inf = open('stats/output_'+cname[1:]+'.delivers', 'r')
##                for line in inf:
##                    ndelivers = int(line.rstrip('\n'))
##                if ndelivers != n:
##                    print('Not all nodes delivered (all optims)! aborting')
##                    print(ndelivers, "out of", n) 
##                    sys.exit()
##                else:
##                    print(' OK ', end='')
##                inf.close()
##
##                cname='c'+str(n)+'_'+str(k)+'_'+str(f)+'-allOptim'
##                cmd = 'rm stats/output_'+cname[1:]+'*'
##                out = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
##                writeNedFile(G, n, k)
##                writeIniFile(n, k)
##                cmd='../BRB -r 0 -m -u Cmdenv -c '+cname+' -n ../src:.:../../../../../sim/inet4/src:../../../../../sim/inet4/examples:../../../../../sim/inet4/tutorials:../../../../../sim/inet4/showcases --image-path=../../../../../sim/inet4/images -l ../../../../../sim/inet4/src/INET '+ininame+' > /dev/null'
##                os.system(cmd)
##
##                ndelivers = 0
##                inf = open('stats/output_'+cname[1:]+'.delivers', 'r')
##                for line in inf:
##                    ndelivers = int(line.rstrip('\n'))
##                if ndelivers != n:
##                    print('Not all nodes delivered (no optims)! aborting')
##                    print(ndelivers, "out of", n)
##                    sys.exit()
##                else:
##                    print(' OK', end='')
##                    if delete_ini_ned_file:
##                        nedname = 'random_'+str(n)+'_'+str(k)+'.ned'
##                        cmd = 'rm '+ininame+' '+nedname
##                        out = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
##                inf.close()
## 
##                cname='c'+str(n)+'_'+str(k)+'_'+str(f)+'-noOptim'
##                inf = open('stats/output_'+cname[1:]+'.msgs', 'r')
##                l0 = []
##                for line in inf:
##                    l0.append(float(line.rstrip('\n')))
##                inf.close()
##                l0_long.extend(l0)
##
##                cname='c'+str(n)+'_'+str(k)+'_'+str(f)+'-allOptim'
##                inf = open('stats/output_'+cname[1:]+'.msgs', 'r')
##                l1 = []
##                for line in inf:
##                    l1.append(float(line.rstrip('\n')))
##                inf.close()
##                l1_long.extend(l1)
##
##                msgsImprovement[n][f][k].append( (mean(l1)-mean(l0)) / mean(l0))
##                print('- msgs :'+str(int(100*(mean(l1)-mean(l0)) / mean(l0)))+'% ',end='')
##                print('('+str(mean(l1))+' '+str(mean(l0))+')')
##
##
##            resd[n][f][k][0] = l0_long
##            resd[n][f][k][1] = l1_long
                

                
                
                
